{"version":3,"sources":["components/CsvDropzone/CsvDropzone.jsx","components/CsvDropzone/Tools.js","components/Ad/Ad.jsx","components/Instructions/Instructions.jsx","components/Disclaimer/Disclaimer.jsx","App.js","reportWebVitals.js","index.js"],"names":["CSV_TYPE_HIFO","CSV_TYPE_LIFO","CsvDropzone","useState","csvType","setCsvType","dateOptions","setDateOptions","Date","getFullYear","toString","selectedYear","setSelectedYear","useEffect","thisYear","options","Array","keys","map","number","y","label","value","handleDropZoneDrop","useCallback","_dropFiles","acceptedFiles","_rejectedFiles","forEach","file","reader","FileReader","fileName","name","onabort","console","log","onerror","onload","evt","csv","parse","result","err","data","target","replace","rows","year","headers","numberRows","i","length","row","rowDict","j","val","header","includes","parseFloat","push","histories","buys","addTxRow","buyRow","buyQuantity","sellRow","transactionType","d","costBasis","proceeds","assetName","processRow","buyHistories","highest","getBuyRow","br","bH","amountSold","amountBought","parseCsv","parseInt","csvContent","Object","join","values","encodedUri","encodeURI","link","document","createElement","setAttribute","body","appendChild","click","readAsText","Stack","vertical","spacing","alignment","RadioButton","helpText","checked","id","onChange","Select","className","DropZone","onDrop","FileUpload","actionTitle","Ad","Google","client","slot","style","display","layout","format","Instructions","maxWidth","Banner","title","status","TextStyle","List","type","Item","Disclaimer","Card","sectioned","App","AppProvider","Layout","DisplayText","size","distribution","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8be440e7.chunk.js","sourcesContent":["import React, {\n    useCallback,\n    useEffect,\n    useState\n} from 'react'\nimport csv from \"csv\"\nimport {parseCsv} from \"./Tools\"\nimport {\n    DropZone,\n    RadioButton,\n    Select,\n    Stack,\n} from \"@shopify/polaris\"\nimport './CsvDropzone.css'\n\nexport const CSV_TYPE_HIFO = 'hifo'\nexport const CSV_TYPE_LIFO = 'lifo'\nconst CsvDropzone = () => {\n\n\n    const [csvType, setCsvType] = useState('hifo')\n    const [dateOptions, setDateOptions] = useState([])\n    const [selectedYear, setSelectedYear] = useState((new Date().getFullYear() - 1).toString())\n\n\n    useEffect(() => {\n        let thisYear = new Date().getFullYear()\n\n        let options = [...Array(100).keys()].map((number) => {\n            let y = (thisYear - number).toString()\n            return (\n                {label: y, value: y}\n            )\n        })\n\n        setDateOptions(options)\n\n\n    }, [])\n\n\n    const handleDropZoneDrop = useCallback(\n        (_dropFiles, acceptedFiles, _rejectedFiles) => {\n\n            acceptedFiles.forEach(file => {\n                const reader = new FileReader()\n                reader.fileName = file.name\n                reader.onabort = () => console.log(\"file reading was aborted\")\n                reader.onerror = () => console.log(\"file reading failed\")\n                reader.onload = (evt) => {\n                    csv.parse(reader.result, (err, data) => {\n                        let fileName = evt.target.fileName.replace('.csv', '').replace('.CSV', '')\n                        fileName = `${fileName}__${csvType}__${selectedYear}.csv`\n                        let rows = parseCsv(data, parseInt(selectedYear), csvType)\n                        let csvContent = \"data:text/csv;charset=utf-8,\"\n                        for (let i = 0; i < rows.length; i++) {\n                            let row = rows[i]\n                            if (i === 0) {\n                                csvContent += Object.keys(row).join(\",\") + '\\n'\n                            } else {\n                                csvContent += Object.values(row).join(\",\") + '\\n'\n                            }\n                        }\n\n                        let encodedUri = encodeURI(csvContent)\n                        let link = document.createElement(\"a\")\n                        link.setAttribute(\"href\", encodedUri)\n                        link.setAttribute(\"download\", fileName)\n                        document.body.appendChild(link)\n\n                        link.click()\n                    })\n                }\n\n                reader.readAsText(file)\n            })\n        },\n        [selectedYear, csvType],\n    )\n\n\n    return (\n        <Stack vertical spacing=\"extraLoose\" alignment=\"center\">\n\n            <Stack alignment=\"center\">\n                <RadioButton\n                    label=\"HIFO\"\n                    helpText=\"Highest In First Out\"\n                    checked={csvType === 'hifo'}\n                    id=\"disabled\"\n                    name=\"accounts\"\n                    onChange={() => {\n                        setCsvType('hifo')\n                    }}\n                />\n                <RadioButton\n                    label=\"LIFO\"\n                    helpText=\"Last In First out\"\n                    id=\"optional\"\n                    name=\"accounts\"\n                    checked={csvType === 'lifo'}\n                    onChange={() => {\n                        setCsvType('lifo')\n                    }}\n                />\n\n            </Stack>\n            <Select\n                label=\"Year\"\n                helpText={\"Which year do you want to calculate taxes on?\"}\n                options={dateOptions}\n                value={selectedYear}\n                onChange={setSelectedYear}\n            />\n\n            <div className=\"CsvDropzone\">\n                <DropZone onDrop={handleDropZoneDrop}>\n                    <DropZone.FileUpload\n                        actionTitle={'Process Transactions'}\n                        // actionHint={'or drop csv file'}\n                    />\n                </DropZone>\n            </div>\n        </Stack>\n    )\n}\n\nexport default CsvDropzone","import {\n    CSV_TYPE_HIFO,\n    CSV_TYPE_LIFO\n} from \"./CsvDropzone\"\n\nexport const parseCsv = (data, year, csvType) => {\n    console.log(\"UP IN HERER\", csvType)\n\n    let headers = data[0]\n\n    let rows = []\n\n    let numberRows = [\n        'Quantity Transacted',\n        'USD Total (inclusive of fees)',\n        'USD Spot Price at Transaction',\n        'USD Fees',\n    ]\n\n    for (let i = 0; i < data.length; i++) {\n        if (i !== 0) {\n            let row = data[i]\n            let rowDict = {}\n            for (let j = 0; j < row.length; j++) {\n                let val = row[j]\n                let header = headers[j]\n                if (numberRows.includes(header)) {\n                    rowDict[header] = parseFloat(val) || 0\n                } else {\n                    rowDict[header] = val\n                }\n            }\n            rows.push(rowDict)\n        }\n    }\n    let histories = {}\n    let buys = []\n\n    const addTxRow = (buyRow, buyQuantity, sellRow, transactionType) => {\n        let d = new Date(sellRow['Timestamp'])\n\n        let costBasis = 0\n\n        if (buyRow['Quantity Transacted'] > 0) {\n            costBasis = buyRow['USD Total (inclusive of fees)'] / buyRow['Quantity Transacted'] * buyQuantity\n        }\n\n        let proceeds = buyQuantity * sellRow['USD Spot Price at Transaction'] - sellRow['USD Fees'] / sellRow['Quantity Transacted'] * buyQuantity\n\n        if (transactionType === 'Sell' && d.getFullYear() === year) {\n            buys.push({\n                'Currency Name': buyRow['Asset'],\n                'Purchase Date': buyRow['Timestamp'],\n                'Cost Basis': costBasis,\n                'Date sold': sellRow['Timestamp'],\n                'Proceeds': proceeds,\n            })\n        }\n    }\n\n    for (let row of rows) {\n        let assetName = row['Asset']\n        let transactionType = row['Transaction Type']\n\n        if (!histories[assetName]) {\n            histories[assetName] = []\n        }\n\n        const processRow = (buyHistories, highest) => {\n\n            const getBuyRow = () => {\n                let br = null\n                if (csvType === CSV_TYPE_HIFO) {\n                    for (let bH of buyHistories) {\n                        if (bH['Quantity Transacted'] > 0) {\n                            if (!br) {\n                                br = bH\n                            } else {\n                                if (highest && row['USD Spot Price at Transaction'] > br['USD Spot Price at Transaction']) {\n                                    br = bH\n                                } else if (!highest && row['USD Spot Price at Transaction'] < br['USD Spot Price at Transaction']) {\n                                    br = bH\n                                }\n                            }\n                        }\n                    }\n                } else if (csvType === CSV_TYPE_LIFO) {\n\n                    if (!highest) {\n                        for (let i = 0; i < buyHistories.length; i++) {\n                            let buyRow = buyHistories[i]\n                            if (buyRow['Quantity Transacted'] > 0) {\n                                return buyRow\n                            }\n                        }\n                    } else {\n                        for (let i = buyHistories.length - 1; i >= 0; i--) {\n                            let buyRow = buyHistories[i]\n                            if (buyRow['Quantity Transacted'] > 0) {\n                                return buyRow\n                            }\n                        }\n                    }\n\n                }\n\n                return br\n            }\n\n            let buyRow = getBuyRow()\n            let amountSold = row['Quantity Transacted']\n            while (buyRow) {\n                let amountBought = buyRow['Quantity Transacted']\n                if (amountBought > amountSold) {\n                    buyRow['Quantity Transacted'] = buyRow['Quantity Transacted'] - amountSold\n                    addTxRow(buyRow, amountSold, row, transactionType, year)\n                    break\n                } else if (amountSold > 0) {\n                    addTxRow(buyRow, buyRow['Quantity Transacted'], row, transactionType, year)\n                    buyRow['Quantity Transacted'] = 0\n                    amountSold -= amountBought\n                }\n                buyRow = getBuyRow()\n            }\n        }\n        if (['Buy', 'Receive', 'Coinbase Earn'].includes(transactionType)) {\n            histories[assetName].push(row)\n        } else if (transactionType === 'Sell') {\n            processRow(histories[assetName], true)\n        } else if (transactionType === 'Send') {\n            processRow(histories[assetName], false)\n        }\n\n    }\n\n    return buys\n}\n\n\n","import React from 'react'\nimport AdSense from 'react-adsense'\n\nconst Ad = () => {\n\n\n    return (\n        <AdSense.Google\n            client='ca-pub-1418606837782831'\n            slot='7806394673'\n            style={{display: 'block'}}\n            layout='in-article'\n            format='fluid'\n        />\n    )\n\n}\n\n\nexport default Ad\n","import React from 'react'\nimport {\n    Banner,\n    List,\n    Stack,\n    TextStyle,\n} from \"@shopify/polaris\"\n\n\nconst Instructions = () => {\n\n\n    return (\n        <div style={{maxWidth: 600}}>\n            <Banner\n                title=\"Instructions\"\n                status=\"info\"\n            >\n                <Stack vertical>\n                    <TextStyle>\n                        Drag your formatted Transaction History CSVs into the Dropzone and wait for your browser\n                        to translate them into your Capital Gains Tax CSV, formatted for TurboTax.\n                    </TextStyle>\n                    <List type=\"number\">\n                        <List.Item>\n                            Download your Transaction History CSV for all time from Coinbase, Robinhood,\n                            Binance, Kraken, etoro or whatever crypto exchange you use.\n                        </List.Item>\n                        <List.Item>\n                            Open the file and edit it to observe to the following:\n                            <List type=\"bullet\">\n                                <List.Item>\n                                    Make sure the top row is the CSV headers. You may have to delete some data.\n                                </List.Item>\n                                <List.Item>\n                                    Rename your headers to this: Timestamp,Transaction Type,Asset,Quantity\n                                    Transacted,USD Spot Price at Transaction,USD Subtotal,USD Total (inclusive\n                                    of fees),USD Fees\n                                </List.Item>\n                                <List.Item>\n                                    Transaction type can be: Buy, Sell, Send, Receive, Coinbase Earn\n                                </List.Item>\n                            </List>\n                        </List.Item>\n                        <List.Item>\n                            Select the HIFO or LIFO method for calculating your tax.\n                            <List type=\"bullet\">\n                                <List.Item>\n                                    HIFO: Highest In First Out means that the buy orders with the highest\n                                    price will be chosen first when deciding where the currency for the sell\n                                    order came from.\n                                </List.Item>\n                                <List.Item>\n                                    LIFO: Last In First Out means that the oldest buy orders will be chosen\n                                    first when deciding where the currency for the sell order came from.\n                                </List.Item>\n                            </List>\n                        </List.Item>\n                    </List>\n                </Stack>\n            </Banner>\n\n        </div>\n    )\n\n}\n\n\nexport default Instructions\n","import React from 'react'\n\nimport {\n    Card,\n    TextStyle,\n} from '@shopify/polaris'\n\nconst Disclaimer = () => {\n\n\n    return (\n        <Card sectioned title=\"Disclaimer\">\n            <TextStyle>\n                This cryptocurrency capital gains tax calculator is for entertainment purposes only. I am not a professional in the crypto tax field.\n                I wrote this for myself to learn how taxes are calculated on crypto currency. The Capital Gains Tax\n                CSV you get back may not be correct.\n            </TextStyle>\n        </Card>\n    )\n\n}\n\n\nexport default Disclaimer\n","import './App.css'\nimport '@shopify/polaris/dist/styles.css'\nimport {\n    AppProvider,\n    Card,\n    DisplayText,\n    Layout,\n    Stack,\n} from '@shopify/polaris'\nimport CsvDropzone from \"./components/CsvDropzone/CsvDropzone\"\nimport Ad from \"./components/Ad/Ad\"\nimport Instructions from \"./components/Instructions/Instructions\"\nimport Disclaimer from \"./components/Disclaimer/Disclaimer\"\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <AppProvider>\n                <Layout>\n\n                </Layout>\n                <Stack vertical spacing=\"extraLoose\" alignment={\"center\"}>\n\n                    <DisplayText size={'extraLarge'}>\n                        Cryptocurrency Tax CSV Converter\n                    </DisplayText>\n\n\n                    <DisplayText size={'large'}>\n                        Transaction History CSV -> Capital Gains Tax CSV\n                    </DisplayText>\n\n                    <Stack distribution={\"fillEvenly\"}>\n                        <Stack.Item>\n                            <Ad/>\n                        </Stack.Item>\n                        <Stack.Item>\n                            <Card sectioned>\n                                <CsvDropzone/>\n                            </Card>\n\n                        </Stack.Item>\n                        <Stack.Item>\n                            <Ad/>\n                        </Stack.Item>\n                    </Stack>\n                    <Instructions/>\n                    <div style={{maxWidth: 600}}>\n                        <Disclaimer/>\n                    </div>\n\n                </Stack>\n            </AppProvider>\n        </div>\n    )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}